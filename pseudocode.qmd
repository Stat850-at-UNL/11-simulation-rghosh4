---
title: "Pseudocode: Craps Simulation"
editor: 
  markdown: 
    wrap: sentence
---

# Instructor Comments

I have scaffolded this set of instructions very carefully.

Please proceed sequentially through this document, and do not move onto the next step until you have completed the present step.

My goal in this class is to teach you how to solve hard problems by breaking them down.
This assignment is the culmination of that process, where you demonstrate that you have the tools to solve these hard problems.

You WILL get confused and miss steps if you do not follow the instructions sequentially.

# Understanding the game flow

ChatGPT provides the following pseudocode for playing a game of craps.
You can see the full script [here](deps/ChatGPT%20Pseudocode.html) (it goes a bit beyond pseudocode).

Note that this pseudocode seems to be relatively Pythonic.
You will have the opportunity to write (somewhat different) pseudocode later, but for now, work with this pseudocode to develop an understanding of the game.

```         
function playCraps():
    while true:
        // Roll the dice
        roll = rollDice()

        // Check the outcome of the roll
        if isComeOutRoll(roll):
            handleComeOutRoll(roll)
        else:
            handlePointRoll(roll)

        // Display current status and ask if the player wants to continue
        displayCurrentStatus()
        if not playAgain():
            break

function rollDice():
    die1 = random(1, 6)
    die2 = random(1, 6)
    total = die1 + die2
    return total

function isComeOutRoll(roll):
    return roll in [2, 3, 7, 11, 12]

function handleComeOutRoll(roll):
    if roll in [7, 11]:
        playerWins()
    elif roll in [2, 3, 12]:
        playerLoses()
    else:
        point = roll
        displayPointMessage(point)
        handlePointRoll(point)

function handlePointRoll(point):
    while true:
        roll = rollDice()

        if roll == point:
            playerWins()
            break
        elif roll == 7:
            playerLoses()
            break

function playerWins():
    displayWinMessage()

function playerLoses():
    displayLoseMessage()

function displayPointMessage(point):
    // Display the point for the current round

function displayWinMessage():
    // Display a message indicating the player has won

function displayLoseMessage():
    // Display a message indicating the player has lost

function displayCurrentStatus():
    // Display the current status of the game

function playAgain():
    // Ask the player if they want to play again
    // Return True if the player wants to play again, False otherwise
```

## Flowchart {#sec-flowchart}

Create a flowchart illustrating how the game unfolds, using the function names provided in the ChatGPT code.
Include this as a PNG file in the repository and link to it here.

![*Flowchart from the given pseudo-code*](Gameplay Flowchart.jpeg)

## Single game data structure {#sec-single-game-data}

It's one thing to write a set of instructions/pseudocode for how to *play* a game, but it's a separate task to figure out how to **computationally simulate** the game.
For instance, in a simulation you often need to keep track of each move, and then compute summary statistics about the game to use when compiling simulation data.

Draw/sketch a tabular data structure that can store the results as you progress through a single game of craps.
Keep track of how many times you've rolled the dice.
What additional columns do you need?
Hint: Each roll of the 2 dice should be a row.

**Single Game Data Structure:**

![](Table 1.png){width="659"}

**Additional Columns (if needed):**

-   `first_point`: Tracks the "point" set on the first roll if the game continues.

## Summary data structure {#sec-game-summary-data}

Draw/sketch a summary tabular data structure to store summary information from a single game of craps.\
Hint: Each game of craps should yield a single row in your table.

The summary table captures the outcomes of an entire game.
Below is one row of the table, that captures the summary of a single craps game that ended in 3 rolls with the player losing in the end with the first point being 5.

![](Table 2.png)

# Simulating a game of craps {#sec-simulation-pseudocode}

In this part of the assignment, you'll spend the time figuring out how to implement craps as a computational simulation by adapting the ChatGPT pseudocode.
Your code structure will be different from ChatGPT's structure because you are going to generate data to estimate various conditional probabilities.

**Requirement 1:**\
You must have a function to simulate a single craps game, `simulate_craps_game`, which returns a data frame with at least the following columns:

-   `id` (# times the dice has been rolled)
-   `roll` (the total roll of the dice)
-   `outcome` (win, loss, or continue)

You may have additional columns if you want.

**Requirement 2:**\
You must include a summary function named `summarize_craps_game` that takes the data frame returned by `simulate_craps_game` and generates a single row with the following columns:

-   `n_rolls` the number of times the dice were rolled in the game,
-   `outcome`, whether the game was won or lost
-   `point`, the total of the dice on the first roll, if the game continued past the first roll, and NA otherwise.

**Requirement 3:**\
You must include a function to run your simulation, `run_craps_simulation(N)` that takes a single integer argument `N` which determines the number of games which will be played.

Think carefully about how you want to structure your code - do you want to return the full results for each game and then summarize, or do you want to summarize before you return the full results?

## Planning Helper Functions {#sec-helper}

Consider helper functions you will need to write to implement the game of craps.
For each function, define the input, output, and provide a comment to explain what the function will do.

Here is pseudocode for a function that simulates the roll of the dice in craps to demonstrate the required format.

```         
roll_dice <- function() {
  # Input: None
  # Output: an integer from 1:12
  # Description: Generate 2 random integers from 1 to 6 and sum them
}
```

Put each function in a separate code block.

The below helper function is used later on in the assignment to calculate an estimate to an interesting conditional probability (described in the simulation file).

```         
calculate_win_probability<-function(sim_results,specified_first_point) {
    # Input:
        sim_results: A data frame summarizing the results of multiple games of craps.
          Columns include:
            - n_rolls: Number of rolls in each game.
            - outcome: Result of each game ("win" or "loss").
            - first_point: The value of the first roll in each game.
        specified_first_point: An integer representing the specific first roll value to condition on.

    # Output:
        - A list containing:
            - Probability_of_Win: The conditional probability of winning given the specified first_point.
            - Mean: The mean of the outcomes (interpreted as probability).
            - Standard_Deviation: The standard deviation of the outcomes.

    # Description:
        - Filters the simulation results for games with a specific first_point value and calculates the conditional probability of winning, along with mean and standard deviation.

    STEP 1: Filter `sim_results` to include only rows where `first_point` matches `specified_first_point`.
        - Use a filtering function (e.g., `filter(first_point == specified_first_point)`).

    STEP 2: Check if any rows remain after filtering.
        - If no rows remain, return an error message indicating no games were found for the specified first_point.

    STEP 3: Calculate the conditional probability of winning.
        - For the filtered data, compute the proportion of games where `outcome` is "win":
            - p_win_given_point = mean(outcome == "win").

    STEP 4: Calculate the mean and standard deviation of the win outcomes.
        - Mean: Use the conditional probability of winning.
        - Standard Deviation: Compute the standard deviation of the binary win/loss outcomes.

    STEP 5: Combine the results into a list.
        - Include:
            - Probability_of_Win = p_win_given_point.
            - Mean = p_win_given_point.
            - Standard_Deviation = computed standard deviation.

    STEP 6: Return the results list.
```

## Planning Main Functions {#sec-main-function-diagram}

Update your flowchart from @sec-flowchart to match the requirements of this section.
Your flowchart should have separate blocks for each function.
Which helper function(s) will be called inside each required function?

***Flowchart Updates:***

-   roll_dice: Generates dice rolls.

-   simulate_craps_game: Calls roll_dice and tracks the game state.

-   summarize_craps_game: Summarizes the game's results.

-   run_craps_simulation: Calls simulate_craps_game N times and aggregates summaries.

## Simulating a full game {#sec-game-pseudocode}

Fill in the pseudocode below to specify how you would return the single game data structure you created in @sec-single-game-data above.
Remember to fill in the input parameter inside the function definition as well as the comment.

```         
simulate_craps_game <- function() {
  # Input: None
  # Output: A data frame with `id`, `roll`, and `outcome` for a single game
  # Description: Simulates a single game of craps with detailed tracking of each roll.
  
      STEP 1: Roll the dice for the first time and store the result.
        - Call roll_dice() to generate a random roll.
        - Initialize a data frame with columns:
            - id: Set to 1 for the first roll.
            - roll: The result of the first dice roll.
            - outcome: Set to "continue" initially.

    STEP 2: Determine the outcome based on the first roll:
        - If the first roll is 7 or 11:
            - Set the outcome of the first roll to "win".
        - Else if the first roll is 2, 3, or 12:
            - Set the outcome of the first roll to "loss".
        - Otherwise, set the first roll as the "point" and continue the game:
            - Store the value of the first roll in a variable called "point".
            - Set a variable "outcome" to "continue".

    STEP 3: Enter a loop to simulate subsequent rolls if the game continues:
        - While "outcome" is still "continue":
            - Roll the dice again using roll_dice().
            - Add a new row to the data frame with:
                - id: Incremented roll number.
                - roll: The result of the dice roll.
                - outcome: Set to "continue" initially.

            - Check the result of the roll:
                - If the roll equals the "point":
                    - Update the outcome of the current roll to "win".
                    - Set "outcome" to "win" to exit the loop.
                - Else if the roll is 7:
                    - Update the outcome of the current roll to "loss".
                    - Set "outcome" to "loss" to exit the loop.

    STEP 4: Return the complete data frame containing all rolls and their outcomes.
}
```

-   It rolls dice, tracks results for each roll, and determines the outcome of the game.
-   The function ends when a win/loss is determined.

## Summarizing a game {#sec-game-summary-pseudocode}

Add a function that summarizes a game of craps (e.g. go from the data structure in @sec-single-game-data to the data structure in @sec-game-summary-data).

```         
summarize_craps_game <- function(craps_data) {
  # Input: Data frame from `simulate_craps_game`
  # Output: A single-row summary with `n_rolls`, `outcome`, and `first_point`
  # Description: Summarizes a single game of craps.
  
  STEP 1: Calculate the total number of rolls in the game.
        - Use the number of rows in the input data frame `craps_data` to determine the number of rolls:
            - n_rolls = number of rows in `craps_data`.

    STEP 2: Determine the final outcome of the game.
        - Extract the last value in the "outcome" column of `craps_data`:
            - outcome = last value in `craps_data$outcome`.

    STEP 3: Extract the first roll value as the "point."
        - Get the first value in the "roll" column of `craps_data`:
            - first_point = first value in `craps_data$roll`.

    STEP 4: Create a summary data frame.
        - Combine the calculated values (n_rolls, outcome, first_point) into a single-row data frame:
            - summary_data = data frame with:
                - n_rolls = total number of rolls.
                - outcome = final game outcome.
                - first_point = value of the first roll.

    STEP 5: Return the summary data frame.
}
```

## Simulating many games {#sec-game-simulation-pseudocode}

```         
run_craps_simulation <- function(N) {
  # Input: Integer N for number of games
  # Output: Data frame summarizing the results of N games
  # Description: Runs N simulations of craps games and summarizes them.
  
  STEP 1: Initialize an empty list to store results of each game.

    STEP 2: Loop from 1 to N:
        - For each iteration:
            - Call `simulate_craps_game()` to simulate a single game of craps.
            - Pass the result to `summarize_craps_game()` to generate a summary row for that game.
            - Append the summary row to the results list.

    STEP 3: Combine all summary rows into a single data frame.
        - Use a function like `do.call(rbind, results)` to combine rows.

    STEP 4: Return the combined data frame containing summaries of all simulated games.
}
```

-   Iteratively calls simulate_craps_game and summarizes the results.

## 
